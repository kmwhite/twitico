#!/usr/bin/env python 
# Copyright (c) 2011, Kristofer M White
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
# 
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY KRISTOFER M WHITE ''AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL KRISTOFER M WHITE OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Kristofer M White.

import pynotify
import pygtk
pygtk.require('2.0')
import gobject
import gtk
import thread
import time
import twitter
#import http://snippets.dzone.com/posts/show/1684

class Twitico(object):
    ''' Main class representing the Twitico icon '''

    def __init__(self):
        ''' Twitico initializer '''
        self.api = twitter.Api(consumer_key='',
                               consumer_secret='',
                               access_token_key='',
                               access_token_secret='')
        self.api.SetSource('Twitico')
        self.create_notification_icon()
        self.tlock = thread.allocate_lock()
        self.last_id = 0

    def create_notification_icon(self):
        ''' Create the notification Icon '''
        self.icon = gtk.StatusIcon()
        self.icon.set_from_stock(gtk.STOCK_ABOUT)
        self.icon.set_visible(True)
        self.icon.connect("popup-menu", self.right_click_event)
        self.icon.set_tooltip('Initializing... ')

    def right_click_event(self, icon, button, time):
        ''' create the twitico menu '''
        menu = gtk.Menu()

        quit = gtk.MenuItem("Quit")
        quit.connect("activate", gtk.main_quit)
        menu.append(quit)

        menu.show_all()

        menu.popup(None, None, gtk.status_icon_position_menu, button, time, self.icon)

    def find_updates(self):
        ''' Find all updates in the users  '''
        while True:
            self.tlock.acquire()
            updates = self.api.GetFriendsTimeline(user = '', since_id = self.last_id)
            try:
                for update in updates:
                    self.notify(update.GetUser().GetScreenName(),
                            update.GetText(), status = pynotify.URGENCY_NORMAL)
                    if self.last_id < update.GetId():
                        self.last_id = update.GetId()
                self.icon.set_tooltip("{0} updates at {1}".format(len(updates), time.strftime("%a %Y.%m.%d %T")))

            except twitter.TwitterError as (errno, strerror):
                self.notify(errno, strerror, status = pynotify.URGENCY_CRITICAL)
            self.tlock.release()
            time.sleep(600)

    def notify(self, subject = "NoUser", text = "NoText", icon = None, status = pynotify.URGENCY_LOW):
        ''' Create notifications '''
        if pynotify.init('Twitico'):
            n = pynotify.Notification(subject, text)
            n.set_urgency(status)
            n.show()
        else:
            print "{0}: {1}".format(subject, text)

if __name__ == '__main__':
    gobject.threads_init()
    gtk.gdk.threads_init()
    tw = Twitico()
    t = thread.start_new_thread(tw.find_updates, ())
    gtk.main()
