#!/usr/bin/env python 

# Standard Library Imports
import ConfigParser
import os
import sys
import thread
import time

# Third-Party Imports
import pynotify
import trayify
import twitter
import twitter_oauth

# Twitico is covered by the 3-Clause BSD License:
LICENSE='''
 Copyright (c) 2011, Kristofer M White
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are
 met:

 * Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
 * Neither the name of the software nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'''


class Twitico(object):
    ''' Main class representing the Twitico icon '''

    def __init__(self):
        ''' Twitico initializer '''

        # The consumer_* values are used to identify Twitico as Twitico to
        # the twitter servers.
        self.consumer_key='V5dE3MyRBD0nQL3sAwvjLA'
        self.consumer_secret='Y1knhhIQvdGZ2VcwQyT0Fjx1DL3wLyFKADr0xNDg'

        # Initialize our tray icon
        self.tray_icon = trayify.initialize('gtk')

        # We need to ensure the config_file exists before we try loading
        # it. We do not want 
        config_file = os.path.expanduser('~/.twitico/config')
        if not os.path.exists(config_file):
            self.tray_icon.show_message('Config Missing', 'warn')
            self.write_config_file(config_file)

        # Read in config and create attr's related
        self.config = self.read_config_file(config_file)
        for name, value in self.config['account'].iteritems():
            setattr(self, name, value)

        # create Api instance
        self.api = twitter_oauth.Api(self.consumer_key, self.consumer_secret,
                                     self.oauth_token, self.oauth_token_secret)

        # unless the specific keys are in the config, get_oauth_obj
        get_oauth_obj = twitter_oauth.GetOauth(self.consumer_key,
                                               self.consumer_secret)

        self.tray_icon.create_icon()
        menu = {
                'Compose': self.tweet,
                'License': self.show_license
                }
        self.tray_icon.add_menu(menu)
        self.tlock = thread.allocate_lock()

        # last_id represents the id of the last rendered tweet. We note this
        # so that we can prevent ourselves from repeating tweets in the
        # timeline.
        self.last_id = None

    def show_license(self, widget):
        ''' Display the license in a window '''
        self.tray_icon.show_message(LICENSE, 'warn')

    def write_config_file(self, config_file):
        ''' create the twitico config file and directory '''

        config_dir = os.path.dirname(config_file)

        if not os.path.exists(config_dir):
            os.mkdir(config_dir, 0700)
        with open(config_file, 'w') as cfgfile:
            # create GetOauth instance
            get_oauth_obj = twitter_oauth.GetOauth(self.consumer_key,
                                                   self.consumer_secret)

            # get oauth_token and oauth token secret
            d = get_oauth_obj.get_oauth()

            # generate config
            config = ConfigParser.ConfigParser()
            config.add_section('account')
            config.set('account', 'oauth_token', d['oauth_token'])
            config.set('account', 'oauth_token_secret', d['oauth_token_secret'])
            config.write(cfgfile)
            cfgfile.close()

    def read_config_file(self, config_file):
        ''' read in an existing twitico config file '''
        config = {}
        cfg_blob = ConfigParser.ConfigParser()
        cfg_blob.read(config_file)
        for section in cfg_blob.sections():
            config[section] = {}
            for option in cfg_blob.options(section):
                config[section][option] = cfg_blob.get(section, option)
        return config

    def find_updates(self):
        ''' Find all updates in the users  '''
        while True:
            self.tlock.acquire()
            updates = self.api.get_friends_timeline(None, self.last_id)
            update_time = time.strftime("%a %Y.%m.%d %T")
            tooltip = "{0} updates at {1}".format(len(updates), update_time)
            try:
                for update in updates:
                    self.notify(update.user.screen_name, update.text)
                    if self.last_id < update.id:
                        self.last_id = update.id
                self.tray_icon.set_tooltip(tooltip)
            except twitter_oauth.TwitterError as (errno, strerror):
                self.critical(errno, strerror)
            self.tlock.release()
            time.sleep(600)

    def tweet(self, widget, message = "FooBarBaz"):
        ''' Create a new tweet '''
        try:
            status = self.api.post_update(
                            self.tray_icon.get_message('What\'s happening...'))
            print "{0} Posting status update: {1}".format('info', status)
        except twitter_oauth.TwitterError as (errno, strerror):
            self.notify(errno, strerror, None, pynotify.URGENCY_CRITICAL)

    def notify(self, subject, text, icon = None, urgency = pynotify.URGENCY_NORMAL):
        ''' Create Notifications

            Possible levels:
                pynotify.URGENCY_LOW
                pynotify.URGENCY_NORMAL
                pynotify.URGENCY_CRITICAL
        '''
        if pynotify.init('Twitico'):
            n = pynotify.Notification(subject, text)
            n.set_urgency(urgency)
            n.show()
        else:
            print "{0}: {1}".format(subject, text)



if __name__ == '__main__':
    tw = Twitico()
    t = thread.start_new_thread(tw.find_updates, ())
    tw.tray_icon.start()
